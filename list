#include <iostream>
#include <vector>
#include <list>
using namespace std;
// vector : 동적배열
// [               ]
 

class Node
{
public:
    Node* _next;
    Node* _prev;
    int _date;

};
// 단일 / 이중 / 원형
// list : 연결리스트
// [1] -> [2] -> [3] -> [4] -> [5]
// [1] <-> [2] <-> [3] <-> [4] <-> [5] <-> [6]
// [1] <-> [2] <-> [3] <-> [4] <-> [5] <->

int main()
{
    // list
    // 중간 삽입/삭제 (good)
    // 처음/끝 삽입/삭제 (good)
    // 임의 접근 (i번째 데이터는 어디 있습니까?)
    list<int> li;
    list<int> ::iterator itRemember;
    for (int i = 0; i < 100; i++)
    {
        if (i == 50)
        {
            itRemember = li.insert(li.end(), i);
        }
        else li.push_back(i+5);
    }

    li.push_front(10);

    int size = li.size();
    
    int first = li.front();
    int last = li.back();

    list<int> ::iterator itbegin = li.begin();

    li.insert(itbegin, 100);
    li.erase(li.begin());

    li.pop_front();

    li.remove(10);

    // 임의 접근이 안된다 but, 중간 삽입/삭제는 빠르다??
    // 50번 인덱스에 있는 데이터를 삭제!
    
    li.erase(itRemember);

    for (list<int> ::iterator it = li.begin(); it != li.end(); ++it)
    {
        cout << *it << endl;
    }
    return 0;

}

